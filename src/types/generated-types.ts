// Auto-generated TypeScript types from event_schema.json
// This file is automatically generated - DO NOT EDIT MANUALLY
// Run: npm run generate-types

// Simple parameter type mapping
export type ParameterType = 'number' | 'string';

// Generated event function types for each event
export type EventFunctionState = Record<string, boolean>;

// Generated parameter interfaces for each event type
export interface life_eventParams {
  icon: string;
  start_time: number;
}

export type inflowFunctionTypes = "inflow";

export interface inflowFunctionState extends EventFunctionState {
  "inflow"?: boolean;
}

export interface inflowParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  amount: number;
  to_key: string;
  final_recurring_inflow?: number;
  number_of_recurring_inflows?: number;
  total_inflow?: number;
}

export interface update_amountParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  amount: number;
}

export type outflowFunctionTypes = "outflow";

export interface outflowFunctionState extends EventFunctionState {
  "outflow"?: boolean;
}

export interface outflowParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  amount: number;
  from_key: string;
  final_recurring_outflow?: number;
  number_of_recurring_outflows?: number;
  total_outflow?: number;
}

export interface update_amountParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  amount: number;
}

export type declare_accountsFunctionTypes = "alter_account_balance";

export interface declare_accountsFunctionState extends EventFunctionState {
  "alter_account_balance"?: boolean;
}

export interface declare_accountsParams {
  start_time: number;
  amount1: number;
  envelope1: string;
  amount2: number;
  envelope2: string;
  amount3: number;
  envelope3: string;
  amount4: number;
  envelope4: string;
  amount5: number;
  envelope5: string;
}

export type transfer_moneyFunctionTypes = "inflow" | "outflow";

export interface transfer_moneyFunctionState extends EventFunctionState {
  "inflow"?: boolean;
  "outflow"?: boolean;
}

export interface transfer_moneyParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  amount: number;
  from_key: string;
  to_key: string;
  final_transfer?: number;
  number_of_transfers?: number;
  total_transfer?: number;
}

export interface update_amountParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  amount: number;
}

export type income_with_changing_parametersFunctionTypes = "inflow";

export interface income_with_changing_parametersFunctionState extends EventFunctionState {
  "inflow"?: boolean;
}

export interface income_with_changing_parametersParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  amount: number;
  to_key: string;
}

export interface update_amountParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  amount: number;
}

export type manual_correctionFunctionTypes = "alter_account_balance";

export interface manual_correctionFunctionState extends EventFunctionState {
  "alter_account_balance"?: boolean;
}

export interface manual_correctionParams {
  start_time: number;
  amount: number;
  to_key: string;
}

export type loan_amortizationFunctionTypes = "pay_off_loan" | "debt_payments" | "deposit_debt" | "final_payment_correction";

export interface loan_amortizationFunctionState extends EventFunctionState {
  "pay_off_loan"?: boolean;
  "debt_payments"?: boolean;
  "deposit_debt"?: boolean;
  "final_payment_correction"?: boolean;
}

export interface loan_amortizationParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  principal: number;
  interest_rate: number;
  loan_term_years: number;
  to_key: string;
  from_key: string;
}

export type loanFunctionTypes = "pay_off_loan" | "debt_payments" | "deposit_debt" | "final_payment_correction";

export interface loanFunctionState extends EventFunctionState {
  "pay_off_loan"?: boolean;
  "debt_payments"?: boolean;
  "deposit_debt"?: boolean;
  "final_payment_correction"?: boolean;
}

export interface loanParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  principal: number;
  loan_term_years: number;
  to_key: string;
  from_key: string;
}

export type purchaseFunctionTypes = "outflow";

export interface purchaseFunctionState extends EventFunctionState {
  "outflow"?: boolean;
}

export interface purchaseParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  money: number;
  from_key: string;
}

export type giftFunctionTypes = "inflow";

export interface giftFunctionState extends EventFunctionState {
  "inflow"?: boolean;
}

export interface giftParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  money: number;
  to_key: string;
}

export type monthly_budgetingFunctionTypes = "update_budget_with_inflation" | "outflow_groceries" | "outflow_utilities" | "outflow_rent" | "outflow_transportation" | "outflow_insurance" | "outflow_healthcare" | "outflow_dining_out" | "outflow_entertainment" | "outflow_personal_care" | "outflow_miscellaneous";

export interface monthly_budgetingFunctionState extends EventFunctionState {
  "update_budget_with_inflation"?: boolean;
  "outflow_groceries"?: boolean;
  "outflow_utilities"?: boolean;
  "outflow_rent"?: boolean;
  "outflow_transportation"?: boolean;
  "outflow_insurance"?: boolean;
  "outflow_healthcare"?: boolean;
  "outflow_dining_out"?: boolean;
  "outflow_entertainment"?: boolean;
  "outflow_personal_care"?: boolean;
  "outflow_miscellaneous"?: boolean;
}

export interface monthly_budgetingParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  from_key: string;
  groceries: number;
  utilities: number;
  rent: number;
  transportation: number;
  insurance: number;
  healthcare: number;
  dining_out: number;
  entertainment: number;
  personal_care: number;
  miscellaneous: number;
}

export interface update_monthly_budgetParams {
  start_time: number;
  key: string;
  amount: number;
}

export type get_jobFunctionTypes = "inflow" | "tax_withholdings" | "p_401k_contribution" | "salary_in_taxable_income";

export interface get_jobFunctionState extends EventFunctionState {
  "inflow"?: boolean;
  "tax_withholdings"?: boolean;
  "p_401k_contribution"?: boolean;
  "salary_in_taxable_income"?: boolean;
}

export interface get_jobParams {
  start_time: number;
  end_time: number;
  salary: number;
  pay_period: number;
  federal_income_tax: number;
  state_income_tax: number;
  local_income_tax: number;
  social_security_tax: number;
  medicare_tax: number;
  p_401k_contribution: number;
  p_401k_match: number;
  to_key: string;
  p_401k_key?: string;
  taxable_income_key?: string;
  federal_withholdings_key?: string;
  state_withholdings_key?: string;
  local_withholdings_key?: string;
}

export interface get_a_raiseParams {
  start_time: number;
  salary: number;
}

export interface reoccurring_raiseParams {
  start_time: number;
  frequency_days: number;
  end_time: number;
  salary_increase: number;
}

export interface get_a_bonusParams {
  start_time: number;
  bonus: number;
}

export interface change_401k_contributionParams {
  start_time: number;
  p_401k_contribution: number;
}

export type get_wage_jobFunctionTypes = "inflow" | "tax_withholdings" | "p_401k_contribution" | "salary_in_taxable_income";

export interface get_wage_jobFunctionState extends EventFunctionState {
  "inflow"?: boolean;
  "tax_withholdings"?: boolean;
  "p_401k_contribution"?: boolean;
  "salary_in_taxable_income"?: boolean;
}

export interface get_wage_jobParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  hourly_wage: number;
  hours_per_week: number;
  pay_period: number;
  federal_income_tax: number;
  state_income_tax: number;
  social_security_tax: number;
  medicare_tax: number;
  p_401k_contribution: number;
  employer_match: number;
  to_key: string;
  p_401k_key: string;
  taxable_income_key?: string;
  federal_withholdings_key?: string;
  state_withholdings_key?: string;
  local_withholdings_key?: string;
}

export interface get_a_raiseParams {
  start_time: number;
  new_hourly_wage: number;
}

export interface change_hoursParams {
  start_time: number;
  new_hours: number;
}

export interface change_401k_contributionParams {
  start_time: number;
  p_401k_contribution: number;
}

export interface change_employer_matchParams {
  start_time: number;
  new_match_rate: number;
}

export interface start_businessParams {
  start_time: number;
  initial_investment: number;
  from_key: string;
  to_key: string;
}

export interface business_incomeParams {
  start_time: number;
  end_time: number;
  monthly_income: number;
  to_key: string;
}

export interface business_lossParams {
  start_time: number;
  loss_amount: number;
  from_key: string;
}

export type retirementFunctionTypes = "money_transfer" | "money_transfer_roth_ira" | "withholding_money_401k" | "401K_penalty" | "roth_ira_penalty";

export interface retirementFunctionState extends EventFunctionState {
  "money_transfer"?: boolean;
  "money_transfer_roth_ira"?: boolean;
  "withholding_money_401k"?: boolean;
  "401K_penalty"?: boolean;
  "roth_ira_penalty"?: boolean;
}

export interface retirementParams {
  start_time: number;
  end_time: number;
  amount: number;
  amount_roth_ira: number;
  frequency_days: number;
  p_401k_key: string;
  roth_ira_key: string;
  to_key: string;
  p_401k_withdraw_withholding_key: string;
  p_401k_withdraw_key: string;
  roth_ira_withdraw_key: string;
  roth_ira_principle_key: string;
}

export type buy_houseFunctionTypes = "downpayment" | "mortgage_payment" | "property_tax" | "home_asset" | "morgage_loan" | "final_home_payment_correction";

export interface buy_houseFunctionState extends EventFunctionState {
  "downpayment"?: boolean;
  "mortgage_payment"?: boolean;
  "property_tax"?: boolean;
  "home_asset"?: boolean;
  "morgage_loan"?: boolean;
  "final_home_payment_correction"?: boolean;
}

export interface buy_houseParams {
  start_time: number;
  home_value: number;
  loan_term_years: number;
  downpayment: number;
  from_key: string;
  to_key: string;
  mortgage_envelope: string;
  property_tax_rate: number;
  end_time?: number;
}

export interface new_appraisalParams {
  start_time: number;
  appraised_value: number;
}

export interface extra_mortgage_paymentParams {
  start_time: number;
  amount: number;
  from_key: string;
  month_index: number;
}

export interface late_paymentParams {
  start_time: number;
  amount: number;
  from_key: string;
  month_index: number;
}

export interface sell_houseParams {
  start_time: number;
  sale_price: number;
  from_key: string;
  to_key: string;
}

export type buy_carFunctionTypes = "downpayment" | "loan_payment" | "car_asset" | "car_loan" | "final_car_payment_correction";

export interface buy_carFunctionState extends EventFunctionState {
  "downpayment"?: boolean;
  "loan_payment"?: boolean;
  "car_asset"?: boolean;
  "car_loan"?: boolean;
  "final_car_payment_correction"?: boolean;
}

export interface buy_carParams {
  start_time: number;
  end_time?: number;
  frequency_days: number;
  car_value: number;
  loan_term_years: number;
  downpayment: number;
  from_key: string;
  to_key: string;
  car_loan_envelope: string;
}

export interface pay_loan_earlyParams {
  start_time: number;
  amount: number;
  from_key: string;
}

export interface car_repairParams {
  start_time: number;
  cost: number;
  from_key: string;
}

export type have_kidFunctionTypes = "outflow";

export interface have_kidFunctionState extends EventFunctionState {
  "outflow"?: boolean;
}

export interface have_kidParams {
  start_time: number;
  initial_costs: number;
  from_key: string;
}

export interface childcare_costsParams {
  start_time: number;
  monthly_cost: number;
  from_key: string;
  end_time: number;
}

export interface college_fundParams {
  start_time: number;
  initial_contribution: number;
  monthly_contribution: number;
  from_key: string;
  to_key: string;
  end_time: number;
}

export type marriageFunctionTypes = "outflow";

export interface marriageFunctionState extends EventFunctionState {
  "outflow"?: boolean;
}

export interface marriageParams {
  start_time: number;
  cost: number;
  from_key: string;
}

export type divorceFunctionTypes = "outflow";

export interface divorceFunctionState extends EventFunctionState {
  "outflow"?: boolean;
}

export interface divorceParams {
  start_time: number;
  settlement_amount: number;
  attorney_fees: number;
  from_key: string;
}

export type pass_awayFunctionTypes = "declare_accounts";

export interface pass_awayFunctionState extends EventFunctionState {
  "declare_accounts"?: boolean;
}

export interface pass_awayParams {
  start_time: number;
}

export interface buy_health_insuranceParams {
  start_time: number;
  monthly_premium: number;
  deductible: number;
  coverage_percentage: number;
  from_key: string;
}

export interface medical_expenseParams {
  start_time: number;
  total_cost: number;
  from_key: string;
  insurance_coverage: number;
  deductible: number;
}

export interface buy_life_insuranceParams {
  start_time: number;
  coverage_amount: number;
  monthly_premium: number;
  term_years: number;
  from_key: string;
}

export interface increase_coverageParams {
  start_time: number;
  new_coverage_amount: number;
  new_monthly_premium: number;
}

export interface receive_government_aidParams {
  start_time: number;
  amount: number;
  frequency_days: number;
  to_key: string;
  end_time: number;
}

export interface invest_moneyParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  amount: number;
  from_key: string;
  to_key: string;
}

export interface Reoccuring_Dividend_PayoutParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  amount: number;
}

export interface transfer_outParams {
  start_time: number;
  amount: number;
  to_key: string;
  short_term_capital_gains_envelope: string;
  long_term_capital_gains_envelope: string;
}

export interface sell_allParams {
  start_time: number;
  to_key: string;
  short_term_capital_gains_envelope: string;
  long_term_capital_gains_envelope: string;
}

export interface high_yield_savings_accountParams {
  start_time: number;
  interest_rate: number;
  amount: number;
  from_key: string;
  to_key: string;
}

export interface buy_groceriesParams {
  start_time: number;
  monthly_amount: number;
  from_key: string;
  end_time: number;
}

export interface roth_ira_contributionParams {
  start_time: number;
  end_time: number;
  frequency_days: number;
  amount: number;
  from_key: string;
  to_key?: string;
  roth_ira_principle_key?: string;
}

export interface federal_subsidized_loanParams {
  start_time: number;
  end_time?: number;
  amount: number;
  graduation_date: number;
  loan_term_years: number;
  from_key: string;
  to_key: string;
  after_school_key: string;
}

export interface federal_unsubsidized_loanParams {
  start_time: number;
  end_time?: number;
  amount: number;
  graduation_date: number;
  loan_term_years: number;
  from_key: string;
  to_key: string;
}

export interface private_student_loanParams {
  start_time: number;
  end_time?: number;
  amount: number;
  graduation_date: number;
  loan_term_years: number;
  from_key: string;
  to_key: string;
}

export interface usa_tax_systemParams {
  start_time: number;
  taxable_income_key?: string;
  penalty_401k_key?: string;
  taxes_401k_key?: string;
  roth_key?: string;
  p_401k_key?: string;
  taxable_home_value_key?: string;
  federal_withholdings_key?: string;
  state_withholdings_key?: string;
  local_withholdings_key?: string;
  ira_contributions_key?: string;
  p_401k_withdraw_withholding_key?: string;
  p_401k_withdraw_key?: string;
  roth_ira_withdraw_key?: string;
  roth_ira_principle_key?: string;
  penalty_roth_key?: string;
  irs_registered_account_key: string;
  long_term_capital_gains_key: string;
  short_term_capital_gains_key: string;
  filing_status: string;
  dependents: number;
  location: string;
}

// Helper function to convert event.parameters to typed objects
export function getTypedParams<T extends Record<string, any>>(event: any): T {
  // Handle case where parameters might already be an object (converted by parseEvents)
  if (Array.isArray(event.parameters)) {
    const params: any = {};
    event.parameters.forEach((param: any) => {
      params[param.type] = param.value;
    });
    return params as T;
  } else {
    // Parameters is already an object
    return event.parameters as T;
  }
}

// Helper function to convert updating event parameters to typed objects
export function getTypedUpdatingParams<T extends Record<string, any>>(updatingEvent: any): T {
  // Handle case where parameters might already be an object (converted by parseEvents)
  if (Array.isArray(updatingEvent.parameters)) {
    const params: any = {};
    updatingEvent.parameters.forEach((param: any) => {
      params[param.type] = param.value;
    });
    return params as T;
  } else {
    // Parameters is already an object
    return updatingEvent.parameters as T;
  }
}

// Helper function to get typed event functions state
export function getTypedEventFunctions<T extends EventFunctionState>(event: any): T {
  // Handle case where event_functions might already be an object (converted by parseEvents)
  if (Array.isArray(event.event_functions)) {
    const functions: any = {};
    event.event_functions.forEach((func: any) => {
      functions[func.type] = func.enabled;
    });
    return functions as T;
  } else {
    // event_functions is already an object
    return event.event_functions as T;
  }
}

// Type-safe event handler function type
export type EventHandler<T extends Record<string, any>> = (
  event: any, 
  envelopes: Record<string, any>
) => void;

// Convenience import for all types - just add this one line to baseFunctions.ts:
// import type * as AllEventTypes from './generated-types';
// Then use: AllEventTypes.invest_moneyParams, AllEventTypes.update_amountParams, etc.

// OR import specific types you need:
// import type { invest_moneyParams, update_amountParams, Reoccuring_Dividend_PayoutParams } from './generated-types';

// OR import everything (not recommended for large projects):
// import * as GeneratedTypes from './generated-types';
// Then use: GeneratedTypes.invest_moneyParams, GeneratedTypes.getTypedParams, etc.

// Available types in this file:
