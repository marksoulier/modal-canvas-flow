// Auto-generated TypeScript types from event_schema.json
// This file is automatically generated - DO NOT EDIT MANUALLY
// Run: npm run generate-types

import type { Event, UpdatingEvent, Parameter } from '../contexts/PlanContext';

// Base parameter types based on parameter_units from schema
export type ParameterUnit = 
  | 'usd' 
  | 'apy' 
  | 'date' 
  | 'envelope' 
  | 'days' 
  | 'hours' 
  | 'years' 
  | 'number_per_year' 
  | 'quantity' 
  | 'percentage' 
  | 'enum' 
  | 'icon'
  | 'number'
  | 'string';

// Type-safe parameter interface
export interface TypedParameter {
  type: string;
  value: number | string;
  parameter_units: ParameterUnit;
  display_name: string;
  description: string;
  default: number | string;
  editable?: boolean;
  options?: string[];
}

// Generated parameter interfaces for each event type
export interface Life_eventParameters {
  icon: string;
  start_time: string;
}

export interface InflowParameters {
  start_time: string;
  end_time: string;
  frequency_days: number;
  amount: number;
  to_key: string;
  final_recurring_inflow?: string;
  number_of_recurring_inflows?: number;
  total_inflow?: number;
}

export interface OutflowParameters {
  start_time: string;
  end_time: string;
  frequency_days: number;
  amount: number;
  from_key: string;
  final_recurring_outflow?: string;
  number_of_recurring_outflows?: number;
  total_outflow?: number;
}

export interface Declare_accountsParameters {
  start_time: string;
  amount1: number;
  envelope1: string;
  amount2: number;
  envelope2: string;
  amount3: number;
  envelope3: string;
  amount4: number;
  envelope4: string;
  amount5: number;
  envelope5: string;
}

export interface Transfer_moneyParameters {
  start_time: string;
  end_time: string;
  frequency_days: number;
  amount: number;
  from_key: string;
  to_key: string;
  final_transfer?: string;
  number_of_transfers?: number;
  total_transfer?: number;
}

export interface Income_with_changing_parametersParameters {
  start_time: string;
  end_time: string;
  frequency_days: number;
  amount: number;
  to_key: string;
}

export interface Manual_correctionParameters {
  start_time: string;
  amount: number;
  to_key: string;
}

export interface Loan_amortizationParameters {
  start_time: string;
  end_time: string;
  frequency_days: number;
  principal: number;
  interest_rate: number;
  loan_term_years: number;
  to_key: string;
  from_key: string;
}

export interface LoanParameters {
  start_time: string;
  end_time: string;
  frequency_days: number;
  principal: number;
  loan_term_years: number;
  to_key: string;
  from_key: string;
}

export interface PurchaseParameters {
  start_time: string;
  end_time: string;
  frequency_days: number;
  money: number;
  from_key: string;
}

export interface GiftParameters {
  start_time: string;
  end_time: string;
  frequency_days: number;
  money: number;
  to_key: string;
}

export interface Monthly_budgetingParameters {
  start_time: string;
  end_time: string;
  frequency_days: number;
  from_key: string;
  groceries: number;
  utilities: number;
  rent: number;
  transportation: number;
  insurance: number;
  healthcare: number;
  dining_out: number;
  entertainment: number;
  personal_care: number;
  miscellaneous: number;
}

export interface Get_jobParameters {
  start_time: string;
  end_time: string;
  salary: number;
  pay_period: number;
  federal_income_tax: number;
  state_income_tax: number;
  social_security_tax: number;
  medicare_tax: number;
  p_401k_contribution: number;
  p_401k_match: number;
  to_key: string;
  p_401k_key?: string;
  taxable_income_key?: string;
  federal_withholdings_key?: string;
  state_withholdings_key?: string;
  local_withholdings_key?: string;
}

export interface Get_wage_jobParameters {
  start_time: string;
  end_time: string;
  frequency_days: number;
  hourly_wage: number;
  hours_per_week: number;
  pay_period: number;
  federal_income_tax: number;
  social_security_tax: number;
  medicare_tax: number;
  p_401k_contribution: number;
  employer_match: number;
  to_key: string;
  p_401k_key: string;
}

export interface Start_businessParameters {
  start_time: string;
  initial_investment: number;
  from_key: string;
  to_key: string;
}

export interface RetirementParameters {
  start_time: string;
  end_time: string;
  amount: number;
  amount_roth_ira: number;
  frequency_days: number;
  p_401k_key: string;
  roth_ira_key: string;
  to_key: string;
  p_401k_withdraw_withholding_key: string;
  p_401k_withdraw_key: string;
  roth_ira_withdraw_key: string;
  roth_ira_principle_key: string;
}

export interface Buy_houseParameters {
  start_time: string;
  home_value: number;
  loan_term_years: number;
  downpayment: number;
  from_key: string;
  to_key: string;
  mortgage_envelope: string;
  property_tax_rate: number;
  end_time?: string;
}

export interface Buy_carParameters {
  start_time: string;
  end_time?: string;
  frequency_days: number;
  car_value: number;
  loan_term_years: number;
  downpayment: number;
  from_key: string;
  to_key: string;
  car_loan_envelope: string;
}

export interface Have_kidParameters {
  start_time: string;
  initial_costs: number;
  from_key: string;
}

export interface MarriageParameters {
  start_time: string;
  cost: number;
  from_key: string;
}

export interface DivorceParameters {
  start_time: string;
  settlement_amount: number;
  attorney_fees: number;
  from_key: string;
}

export interface Pass_awayParameters {
  start_time: string;
}

export interface Buy_health_insuranceParameters {
  start_time: string;
  monthly_premium: number;
  deductible: number;
  coverage_percentage: number;
  from_key: string;
}

export interface Buy_life_insuranceParameters {
  start_time: string;
  coverage_amount: number;
  monthly_premium: number;
  term_years: number;
  from_key: string;
}

export interface Receive_government_aidParameters {
  start_time: string;
  amount: number;
  frequency_days: number;
  to_key: string;
  end_time: string;
}

export interface Invest_moneyParameters {
  start_time: string;
  end_time: string;
  frequency_days: number;
  amount: number;
  from_key: string;
  to_key: string;
}

export interface High_yield_savings_accountParameters {
  start_time: string;
  interest_rate: number;
  amount: number;
  from_key: string;
  to_key: string;
}

export interface Buy_groceriesParameters {
  start_time: string;
  monthly_amount: number;
  from_key: string;
  end_time: string;
}

export interface Roth_ira_contributionParameters {
  start_time: string;
  end_time: string;
  frequency_days: number;
  amount: number;
  from_key: string;
  to_key?: string;
  roth_ira_principle_key?: string;
}

export interface Tax_payment_estimatedParameters {
  start_time: string;
  end_time: string;
  yearly_income: number;
  filing_status: string;
  number_of_dependents: number;
  retirement_contributions: number;
  itemized_deductions: number;
  capital_gains: number;
  federal_tax_rate: number;
  state_tax_rate: number;
  federal_income_tax_withheld: number;
  state_income_tax_withheld: number;
  from_key: string;
}

export interface Federal_subsidized_loanParameters {
  start_time: string;
  end_time?: string;
  amount: number;
  graduation_date: string;
  loan_term_years: number;
  from_key: string;
  to_key: string;
  after_school_key: string;
}

export interface Federal_unsubsidized_loanParameters {
  start_time: string;
  end_time?: string;
  amount: number;
  graduation_date: string;
  loan_term_years: number;
  from_key: string;
  to_key: string;
}

export interface Private_student_loanParameters {
  start_time: string;
  end_time?: string;
  amount: number;
  graduation_date: string;
  loan_term_years: number;
  from_key: string;
  to_key: string;
}

export interface Usa_tax_systemParameters {
  start_time: string;
  taxable_income_key?: string;
  penalty_401k_key?: string;
  taxes_401k_key?: string;
  roth_key?: string;
  p_401k_key?: string;
  taxable_home_value_key?: string;
  federal_withholdings_key?: string;
  state_withholdings_key?: string;
  local_withholdings_key?: string;
  ira_contributions_key?: string;
  p_401k_withdraw_withholding_key?: string;
  p_401k_withdraw_key?: string;
  roth_ira_withdraw_key?: string;
  roth_ira_principle_key?: string;
  penalty_roth_key?: string;
  irs_registered_account_key: string;
  filing_status: string;
  dependents: number;
  location: string;
}

// Union type for all parameter types
export type EventParameters = 
  | Life_eventParameters
  | InflowParameters
  | OutflowParameters
  | Declare_accountsParameters
  | Transfer_moneyParameters
  | Income_with_changing_parametersParameters
  | Manual_correctionParameters
  | Loan_amortizationParameters
  | LoanParameters
  | PurchaseParameters
  | GiftParameters
  | Monthly_budgetingParameters
  | Get_jobParameters
  | Get_wage_jobParameters
  | Start_businessParameters
  | RetirementParameters
  | Buy_houseParameters
  | Buy_carParameters
  | Have_kidParameters
  | MarriageParameters
  | DivorceParameters
  | Pass_awayParameters
  | Buy_health_insuranceParameters
  | Buy_life_insuranceParameters
  | Receive_government_aidParameters
  | Invest_moneyParameters
  | High_yield_savings_accountParameters
  | Buy_groceriesParameters
  | Roth_ira_contributionParameters
  | Tax_payment_estimatedParameters
  | Federal_subsidized_loanParameters
  | Federal_unsubsidized_loanParameters
  | Private_student_loanParameters
  | Usa_tax_systemParameters;

// Type-safe event interface
export interface TypedEvent<T extends EventParameters = EventParameters> extends Omit<Event, 'parameters'> {
  parameters: T;
}

// Type-safe updating event interface
export interface TypedUpdatingEvent<T extends EventParameters = EventParameters> extends Omit<UpdatingEvent, 'parameters'> {
  parameters: T;
}

// Function signature for event handlers
export type EventHandler<T extends EventParameters = EventParameters> = (
  event: TypedEvent<T>,
  envelopes: Record<string, any>,
  onUpdate?: (updates: Array<{ eventId: number, paramType: string, value: number }>) => void,
  event_functions?: Array<{ title: string; enabled: boolean }>
) => void;

// Type-safe event handler map
export interface EventHandlerMap {
  life_event: EventHandler<Life_eventParameters>;
  inflow: EventHandler<InflowParameters>;
  outflow: EventHandler<OutflowParameters>;
  declare_accounts: EventHandler<Declare_accountsParameters>;
  transfer_money: EventHandler<Transfer_moneyParameters>;
  income_with_changing_parameters: EventHandler<Income_with_changing_parametersParameters>;
  manual_correction: EventHandler<Manual_correctionParameters>;
  loan_amortization: EventHandler<Loan_amortizationParameters>;
  loan: EventHandler<LoanParameters>;
  purchase: EventHandler<PurchaseParameters>;
  gift: EventHandler<GiftParameters>;
  monthly_budgeting: EventHandler<Monthly_budgetingParameters>;
  get_job: EventHandler<Get_jobParameters>;
  get_wage_job: EventHandler<Get_wage_jobParameters>;
  start_business: EventHandler<Start_businessParameters>;
  retirement: EventHandler<RetirementParameters>;
  buy_house: EventHandler<Buy_houseParameters>;
  buy_car: EventHandler<Buy_carParameters>;
  have_kid: EventHandler<Have_kidParameters>;
  marriage: EventHandler<MarriageParameters>;
  divorce: EventHandler<DivorceParameters>;
  pass_away: EventHandler<Pass_awayParameters>;
  buy_health_insurance: EventHandler<Buy_health_insuranceParameters>;
  buy_life_insurance: EventHandler<Buy_life_insuranceParameters>;
  receive_government_aid: EventHandler<Receive_government_aidParameters>;
  invest_money: EventHandler<Invest_moneyParameters>;
  high_yield_savings_account: EventHandler<High_yield_savings_accountParameters>;
  buy_groceries: EventHandler<Buy_groceriesParameters>;
  roth_ira_contribution: EventHandler<Roth_ira_contributionParameters>;
  tax_payment_estimated: EventHandler<Tax_payment_estimatedParameters>;
  federal_subsidized_loan: EventHandler<Federal_subsidized_loanParameters>;
  federal_unsubsidized_loan: EventHandler<Federal_unsubsidized_loanParameters>;
  private_student_loan: EventHandler<Private_student_loanParameters>;
  usa_tax_system: EventHandler<Usa_tax_systemParameters>;
}

// Helper type to get parameter type from event type
export type EventParametersForType<T extends keyof EventHandlerMap> = 
  Parameters<EventHandlerMap[T]>[0]['parameters'];

// Helper type to get event type from parameter type
export type EventTypeForParameters<T extends EventParameters> = {
  [K in keyof EventHandlerMap]: EventParametersForType<K> extends T ? K : never;
}[keyof EventHandlerMap];

// Type guard to check if an event has specific parameters
export function hasParameters<T extends EventParameters>(
  event: Event,
  parameterCheck: (params: any) => params is T
): event is TypedEvent<T> {
  return parameterCheck(event.parameters as any);
}

// Generated type guards for each event type
export function isLife_eventEvent(event: Event): event is TypedEvent<Life_eventParameters> {
  return event.type === 'life_event';
}

export function isInflowEvent(event: Event): event is TypedEvent<InflowParameters> {
  return event.type === 'inflow';
}

export function isOutflowEvent(event: Event): event is TypedEvent<OutflowParameters> {
  return event.type === 'outflow';
}

export function isDeclare_accountsEvent(event: Event): event is TypedEvent<Declare_accountsParameters> {
  return event.type === 'declare_accounts';
}

export function isTransfer_moneyEvent(event: Event): event is TypedEvent<Transfer_moneyParameters> {
  return event.type === 'transfer_money';
}

export function isIncome_with_changing_parametersEvent(event: Event): event is TypedEvent<Income_with_changing_parametersParameters> {
  return event.type === 'income_with_changing_parameters';
}

export function isManual_correctionEvent(event: Event): event is TypedEvent<Manual_correctionParameters> {
  return event.type === 'manual_correction';
}

export function isLoan_amortizationEvent(event: Event): event is TypedEvent<Loan_amortizationParameters> {
  return event.type === 'loan_amortization';
}

export function isLoanEvent(event: Event): event is TypedEvent<LoanParameters> {
  return event.type === 'loan';
}

export function isPurchaseEvent(event: Event): event is TypedEvent<PurchaseParameters> {
  return event.type === 'purchase';
}

export function isGiftEvent(event: Event): event is TypedEvent<GiftParameters> {
  return event.type === 'gift';
}

export function isMonthly_budgetingEvent(event: Event): event is TypedEvent<Monthly_budgetingParameters> {
  return event.type === 'monthly_budgeting';
}

export function isGet_jobEvent(event: Event): event is TypedEvent<Get_jobParameters> {
  return event.type === 'get_job';
}

export function isGet_wage_jobEvent(event: Event): event is TypedEvent<Get_wage_jobParameters> {
  return event.type === 'get_wage_job';
}

export function isStart_businessEvent(event: Event): event is TypedEvent<Start_businessParameters> {
  return event.type === 'start_business';
}

export function isRetirementEvent(event: Event): event is TypedEvent<RetirementParameters> {
  return event.type === 'retirement';
}

export function isBuy_houseEvent(event: Event): event is TypedEvent<Buy_houseParameters> {
  return event.type === 'buy_house';
}

export function isBuy_carEvent(event: Event): event is TypedEvent<Buy_carParameters> {
  return event.type === 'buy_car';
}

export function isHave_kidEvent(event: Event): event is TypedEvent<Have_kidParameters> {
  return event.type === 'have_kid';
}

export function isMarriageEvent(event: Event): event is TypedEvent<MarriageParameters> {
  return event.type === 'marriage';
}

export function isDivorceEvent(event: Event): event is TypedEvent<DivorceParameters> {
  return event.type === 'divorce';
}

export function isPass_awayEvent(event: Event): event is TypedEvent<Pass_awayParameters> {
  return event.type === 'pass_away';
}

export function isBuy_health_insuranceEvent(event: Event): event is TypedEvent<Buy_health_insuranceParameters> {
  return event.type === 'buy_health_insurance';
}

export function isBuy_life_insuranceEvent(event: Event): event is TypedEvent<Buy_life_insuranceParameters> {
  return event.type === 'buy_life_insurance';
}

export function isReceive_government_aidEvent(event: Event): event is TypedEvent<Receive_government_aidParameters> {
  return event.type === 'receive_government_aid';
}

export function isInvest_moneyEvent(event: Event): event is TypedEvent<Invest_moneyParameters> {
  return event.type === 'invest_money';
}

export function isHigh_yield_savings_accountEvent(event: Event): event is TypedEvent<High_yield_savings_accountParameters> {
  return event.type === 'high_yield_savings_account';
}

export function isBuy_groceriesEvent(event: Event): event is TypedEvent<Buy_groceriesParameters> {
  return event.type === 'buy_groceries';
}

export function isRoth_ira_contributionEvent(event: Event): event is TypedEvent<Roth_ira_contributionParameters> {
  return event.type === 'roth_ira_contribution';
}

export function isTax_payment_estimatedEvent(event: Event): event is TypedEvent<Tax_payment_estimatedParameters> {
  return event.type === 'tax_payment_estimated';
}

export function isFederal_subsidized_loanEvent(event: Event): event is TypedEvent<Federal_subsidized_loanParameters> {
  return event.type === 'federal_subsidized_loan';
}

export function isFederal_unsubsidized_loanEvent(event: Event): event is TypedEvent<Federal_unsubsidized_loanParameters> {
  return event.type === 'federal_unsubsidized_loan';
}

export function isPrivate_student_loanEvent(event: Event): event is TypedEvent<Private_student_loanParameters> {
  return event.type === 'private_student_loan';
}

export function isUsa_tax_systemEvent(event: Event): event is TypedEvent<Usa_tax_systemParameters> {
  return event.type === 'usa_tax_system';
}

// Utility type for creating type-safe event handlers
export type CreateEventHandler<T extends keyof EventHandlerMap> = EventHandlerMap[T];

// Type-safe envelope interface
export interface TypedEnvelope {
  name: string;
  category: string;
  growth: string;
  rate: number;
  account_type: string;
  days_of_usefulness?: number;
}

// Type-safe envelope map
export type EnvelopeMap = Record<string, TypedEnvelope>;
